{"ast":null,"code":"import * as e from \"react\";\nfunction r() {\n  return r = Object.assign ? Object.assign.bind() : function (e) {\n    for (var r = 1; r < arguments.length; r++) {\n      var n = arguments[r];\n      for (var t in n) Object.prototype.hasOwnProperty.call(n, t) && (e[t] = n[t]);\n    }\n    return e;\n  }, r.apply(this, arguments);\n}\nvar n,\n  t = [\"children\", \"options\"],\n  i = {\n    blockQuote: \"0\",\n    breakLine: \"1\",\n    breakThematic: \"2\",\n    codeBlock: \"3\",\n    codeFenced: \"4\",\n    codeInline: \"5\",\n    footnote: \"6\",\n    footnoteReference: \"7\",\n    gfmTask: \"8\",\n    heading: \"9\",\n    headingSetext: \"10\",\n    htmlBlock: \"11\",\n    htmlComment: \"12\",\n    htmlSelfClosing: \"13\",\n    image: \"14\",\n    link: \"15\",\n    linkAngleBraceStyleDetector: \"16\",\n    linkBareUrlDetector: \"17\",\n    linkMailtoDetector: \"18\",\n    newlineCoalescer: \"19\",\n    orderedList: \"20\",\n    paragraph: \"21\",\n    ref: \"22\",\n    refImage: \"23\",\n    refLink: \"24\",\n    table: \"25\",\n    tableSeparator: \"26\",\n    text: \"27\",\n    textBolded: \"28\",\n    textEmphasized: \"29\",\n    textEscaped: \"30\",\n    textMarked: \"31\",\n    textStrikethroughed: \"32\",\n    unorderedList: \"33\"\n  };\n!function (e) {\n  e[e.MAX = 0] = \"MAX\", e[e.HIGH = 1] = \"HIGH\", e[e.MED = 2] = \"MED\", e[e.LOW = 3] = \"LOW\", e[e.MIN = 4] = \"MIN\";\n}(n || (n = {}));\nvar a = [\"allowFullScreen\", \"allowTransparency\", \"autoComplete\", \"autoFocus\", \"autoPlay\", \"cellPadding\", \"cellSpacing\", \"charSet\", \"classId\", \"colSpan\", \"contentEditable\", \"contextMenu\", \"crossOrigin\", \"encType\", \"formAction\", \"formEncType\", \"formMethod\", \"formNoValidate\", \"formTarget\", \"frameBorder\", \"hrefLang\", \"inputMode\", \"keyParams\", \"keyType\", \"marginHeight\", \"marginWidth\", \"maxLength\", \"mediaGroup\", \"minLength\", \"noValidate\", \"radioGroup\", \"readOnly\", \"rowSpan\", \"spellCheck\", \"srcDoc\", \"srcLang\", \"srcSet\", \"tabIndex\", \"useMap\"].reduce(function (e, r) {\n    return e[r.toLowerCase()] = r, e;\n  }, {\n    class: \"className\",\n    for: \"htmlFor\"\n  }),\n  l = {\n    amp: \"&\",\n    apos: \"'\",\n    gt: \">\",\n    lt: \"<\",\n    nbsp: \" \",\n    quot: \"“\"\n  },\n  o = [\"style\", \"script\"],\n  c = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi,\n  u = /mailto:/i,\n  s = /\\n{2,}$/,\n  d = /^(\\s*>[\\s\\S]*?)(?=\\n\\n|$)/,\n  f = /^ *> ?/gm,\n  p = /^(?:\\[!([^\\]]*)\\]\\n)?([\\s\\S]*)/,\n  h = /^ {2,}\\n/,\n  m = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/,\n  g = /^(?: {1,3})?(`{3,}|~{3,}) *(\\S+)? *([^\\n]*?)?\\n([\\s\\S]*?)(?:\\1\\n?|$)/,\n  y = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/,\n  k = /^(`+)((?:\\\\`|[^`])+)\\1/,\n  v = /^(?:\\n *)*\\n/,\n  x = /\\r\\n?/g,\n  b = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/,\n  C = /^\\[\\^([^\\]]+)]/,\n  S = /\\f/g,\n  w = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/,\n  E = /^\\s*?\\[(x|\\s)\\]/,\n  z = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n  L = /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n  A = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/,\n  T = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i,\n  $ = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi,\n  B = /^<!--[\\s\\S]*?(?:-->)/,\n  O = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/,\n  M = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i,\n  R = /^\\{.*\\}$/,\n  I = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  U = /^<([^ >]+@[^ >]+)>/,\n  D = /^<([^ >]+:\\/[^ >]+)>/,\n  N = /-([a-z])?/gi,\n  j = /^(\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/,\n  H = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/,\n  P = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  _ = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  F = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/,\n  G = /\\t/g,\n  W = /(^ *\\||\\| *$)/g,\n  Z = /^ *:-+: *$/,\n  q = /^ *:-+ *$/,\n  Q = /^ *-+: *$/,\n  V = \"((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|\\\\\\\\\\\\1|[\\\\s\\\\S])+?)\",\n  X = new RegExp(\"^([*_])\\\\1\" + V + \"\\\\1\\\\1(?!\\\\1)\"),\n  J = new RegExp(\"^([*_])\" + V + \"\\\\1(?!\\\\1)\"),\n  K = new RegExp(\"^(==)\" + V + \"\\\\1\"),\n  Y = new RegExp(\"^(~~)\" + V + \"\\\\1\"),\n  ee = /^\\\\([^0-9A-Za-z\\s])/,\n  re = /\\\\([^0-9A-Za-z\\s])/g,\n  ne = /^([\\s\\S](?:(?!  |[0-9]\\.)[^*_~\\-\\n<`\\\\\\[!])*)/,\n  te = /^\\n+/,\n  ie = /^([ \\t]*)/,\n  ae = /\\\\([^\\\\])/g,\n  le = /(?:^|\\n)( *)$/,\n  oe = \"(?:\\\\d+\\\\.)\",\n  ce = \"(?:[*+-])\";\nfunction ue(e) {\n  return \"( *)(\" + (1 === e ? oe : ce) + \") +\";\n}\nvar se = ue(1),\n  de = ue(2);\nfunction fe(e) {\n  return new RegExp(\"^\" + (1 === e ? se : de));\n}\nvar pe = fe(1),\n  he = fe(2);\nfunction me(e) {\n  return new RegExp(\"^\" + (1 === e ? se : de) + \"[^\\\\n]*(?:\\\\n(?!\\\\1\" + (1 === e ? oe : ce) + \" )[^\\\\n]*)*(\\\\n|$)\", \"gm\");\n}\nvar ge = me(1),\n  ye = me(2);\nfunction ke(e) {\n  var r = 1 === e ? oe : ce;\n  return new RegExp(\"^( *)(\" + r + \") [\\\\s\\\\S]+?(?:\\\\n{2,}(?! )(?!\\\\1\" + r + \" (?!\" + r + \" ))\\\\n*|\\\\s*\\\\n*$)\");\n}\nvar ve = ke(1),\n  xe = ke(2);\nfunction be(e, r) {\n  var n = 1 === r,\n    t = n ? ve : xe,\n    a = n ? ge : ye,\n    l = n ? pe : he;\n  return {\n    match: Oe(function (e, r) {\n      var n = le.exec(r.prevCapture);\n      return n && (r.list || !r.inline && !r.simple) ? t.exec(e = n[1] + e) : null;\n    }),\n    order: 1,\n    parse: function (e, r, t) {\n      var i = n ? +e[2] : void 0,\n        o = e[0].replace(s, \"\\n\").match(a),\n        c = !1;\n      return {\n        items: o.map(function (e, n) {\n          var i = l.exec(e)[0].length,\n            a = new RegExp(\"^ {1,\" + i + \"}\", \"gm\"),\n            u = e.replace(a, \"\").replace(l, \"\"),\n            s = n === o.length - 1,\n            d = -1 !== u.indexOf(\"\\n\\n\") || s && c;\n          c = d;\n          var f,\n            p = t.inline,\n            h = t.list;\n          t.list = !0, d ? (t.inline = !1, f = ze(u) + \"\\n\\n\") : (t.inline = !0, f = ze(u));\n          var m = r(f, t);\n          return t.inline = p, t.list = h, m;\n        }),\n        ordered: n,\n        start: i\n      };\n    },\n    render: function (r, n, t) {\n      return e(r.ordered ? \"ol\" : \"ul\", {\n        key: t.key,\n        start: r.type === i.orderedList ? r.start : void 0\n      }, r.items.map(function (r, i) {\n        return e(\"li\", {\n          key: i\n        }, n(r, t));\n      }));\n    }\n  };\n}\nvar Ce = new RegExp(\"^\\\\[((?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*)\\\\]\\\\(\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\\\\)\"),\n  Se = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/,\n  we = [d, g, y, z, A, L, j, ve, xe],\n  Ee = [].concat(we, [/^[^\\n]+(?:  \\n|\\n{2,})/, T, B, M]);\nfunction ze(e) {\n  for (var r = e.length; r > 0 && e[r - 1] <= \" \";) r--;\n  return e.slice(0, r);\n}\nfunction Le(e) {\n  return e.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, \"a\").replace(/[çÇ]/g, \"c\").replace(/[ðÐ]/g, \"d\").replace(/[ÈÉÊËéèêë]/g, \"e\").replace(/[ÏïÎîÍíÌì]/g, \"i\").replace(/[Ññ]/g, \"n\").replace(/[øØœŒÕõÔôÓóÒò]/g, \"o\").replace(/[ÜüÛûÚúÙù]/g, \"u\").replace(/[ŸÿÝý]/g, \"y\").replace(/[^a-z0-9- ]/gi, \"\").replace(/ /gi, \"-\").toLowerCase();\n}\nfunction Ae(e) {\n  return Q.test(e) ? \"right\" : Z.test(e) ? \"center\" : q.test(e) ? \"left\" : null;\n}\nfunction Te(e, r, n, t) {\n  var i = n.inTable;\n  n.inTable = !0;\n  var a = [[]],\n    l = \"\";\n  function o() {\n    if (l) {\n      var e = a[a.length - 1];\n      e.push.apply(e, r(l, n)), l = \"\";\n    }\n  }\n  return e.trim().split(/(`[^`]*`|\\\\\\||\\|)/).filter(Boolean).forEach(function (e, r, n) {\n    \"|\" === e.trim() && (o(), t) ? 0 !== r && r !== n.length - 1 && a.push([]) : l += e;\n  }), o(), n.inTable = i, a;\n}\nfunction $e(e, r, n) {\n  n.inline = !0;\n  var t = e[2] ? e[2].replace(W, \"\").split(\"|\").map(Ae) : [],\n    a = e[3] ? function (e, r, n) {\n      return e.trim().split(\"\\n\").map(function (e) {\n        return Te(e, r, n, !0);\n      });\n    }(e[3], r, n) : [],\n    l = Te(e[1], r, n, !!a.length);\n  return n.inline = !1, a.length ? {\n    align: t,\n    cells: a,\n    header: l,\n    type: i.table\n  } : {\n    children: l,\n    type: i.paragraph\n  };\n}\nfunction Be(e, r) {\n  return null == e.align[r] ? {} : {\n    textAlign: e.align[r]\n  };\n}\nfunction Oe(e) {\n  return e.inline = 1, e;\n}\nfunction Me(e) {\n  return Oe(function (r, n) {\n    return n.inline ? e.exec(r) : null;\n  });\n}\nfunction Re(e) {\n  return Oe(function (r, n) {\n    return n.inline || n.simple ? e.exec(r) : null;\n  });\n}\nfunction Ie(e) {\n  return function (r, n) {\n    return n.inline || n.simple ? null : e.exec(r);\n  };\n}\nfunction Ue(e) {\n  return Oe(function (r) {\n    return e.exec(r);\n  });\n}\nfunction De(e, r) {\n  if (r.inline || r.simple) return null;\n  var n = \"\";\n  e.split(\"\\n\").every(function (e) {\n    return e += \"\\n\", !we.some(function (r) {\n      return r.test(e);\n    }) && (n += e, !!e.trim());\n  });\n  var t = ze(n);\n  return \"\" == t ? null : [n,, t];\n}\nfunction Ne(e) {\n  try {\n    if (decodeURIComponent(e).replace(/[^A-Za-z0-9/:]/g, \"\").match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) return null;\n  } catch (e) {\n    return null;\n  }\n  return e;\n}\nfunction je(e) {\n  return e.replace(ae, \"$1\");\n}\nfunction He(e, r, n) {\n  var t = n.inline || !1,\n    i = n.simple || !1;\n  n.inline = !0, n.simple = !0;\n  var a = e(r, n);\n  return n.inline = t, n.simple = i, a;\n}\nfunction Pe(e, r, n) {\n  var t = n.inline || !1,\n    i = n.simple || !1;\n  n.inline = !1, n.simple = !0;\n  var a = e(r, n);\n  return n.inline = t, n.simple = i, a;\n}\nfunction _e(e, r, n) {\n  var t = n.inline || !1;\n  n.inline = !1;\n  var i = e(r, n);\n  return n.inline = t, i;\n}\nvar Fe = function (e, r, n) {\n  return {\n    children: He(r, e[2], n)\n  };\n};\nfunction Ge() {\n  return {};\n}\nfunction We() {\n  return null;\n}\nfunction Ze() {\n  return [].slice.call(arguments).filter(Boolean).join(\" \");\n}\nfunction qe(e, r, n) {\n  for (var t = e, i = r.split(\".\"); i.length && void 0 !== (t = t[i[0]]);) i.shift();\n  return t || n;\n}\nfunction Qe(e, r) {\n  var n = qe(r, e);\n  return n ? \"function\" == typeof n || \"object\" == typeof n && \"render\" in n ? n : qe(r, e + \".component\", e) : e;\n}\nfunction Ve(n, t) {\n  var s;\n  function W(e, n) {\n    var i,\n      a = qe(t.overrides, e + \".props\", {});\n    return (i = t).createElement.apply(i, [Qe(e, t.overrides), r({}, n, a, {\n      className: Ze(null == n ? void 0 : n.className, a.className) || void 0\n    })].concat([].slice.call(arguments, 2)));\n  }\n  function Z(e) {\n    e = e.replace(w, \"\");\n    var r = !1;\n    t.forceInline ? r = !0 : t.forceBlock || (r = !1 === F.test(e));\n    for (var n = ce(oe(r ? e : ze(e).replace(te, \"\") + \"\\n\\n\", {\n      inline: r\n    })); \"string\" == typeof n[n.length - 1] && !n[n.length - 1].trim();) n.pop();\n    if (null === t.wrapper) return n;\n    var i,\n      a = t.wrapper || (r ? \"span\" : \"div\");\n    if (n.length > 1 || t.forceWrapper) i = n;else {\n      if (1 === n.length) return \"string\" == typeof (i = n[0]) ? W(\"span\", {\n        key: \"outer\"\n      }, i) : i;\n      i = null;\n    }\n    return t.createElement(a, {\n      key: \"outer\"\n    }, i);\n  }\n  function q(e, r) {\n    var n = r.match(c);\n    return n ? n.reduce(function (r, n) {\n      var i = n.indexOf(\"=\");\n      if (-1 !== i) {\n        var l = function (e) {\n            return -1 !== e.indexOf(\"-\") && null === e.match(O) && (e = e.replace(N, function (e, r) {\n              return r.toUpperCase();\n            })), e;\n          }(n.slice(0, i)).trim(),\n          o = function (e) {\n            var r = e[0];\n            return ('\"' === r || \"'\" === r) && e.length >= 2 && e[e.length - 1] === r ? e.slice(1, -1) : e;\n          }(n.slice(i + 1).trim()),\n          c = a[l] || l;\n        if (\"ref\" === c) return r;\n        var u = r[c] = function (e, r, n, t) {\n          return \"style\" === r ? n.split(/;\\s?/).reduce(function (e, r) {\n            var n = r.slice(0, r.indexOf(\":\"));\n            return e[n.trim().replace(/(-[a-z])/g, function (e) {\n              return e[1].toUpperCase();\n            })] = r.slice(n.length + 1).trim(), e;\n          }, {}) : \"href\" === r || \"src\" === r ? t(n, e, r) : (n.match(R) && (n = n.slice(1, n.length - 1)), \"true\" === n || \"false\" !== n && n);\n        }(e, l, o, t.sanitizer);\n        \"string\" == typeof u && (T.test(u) || M.test(u)) && (r[c] = Z(u.trim()));\n      } else \"style\" !== n && (r[a[n] || n] = !0);\n      return r;\n    }, {}) : null;\n  }\n  void 0 === n && (n = \"\"), void 0 === t && (t = {}), t.overrides = t.overrides || {}, t.sanitizer = t.sanitizer || Ne, t.slugify = t.slugify || Le, t.namedCodesToUnicode = t.namedCodesToUnicode ? r({}, l, t.namedCodesToUnicode) : l, t.createElement = t.createElement || e.createElement;\n  var Q = [],\n    V = {},\n    ae = ((s = {})[i.blockQuote] = {\n      match: Ie(d),\n      order: 1,\n      parse: function (e, r, n) {\n        var t = e[0].replace(f, \"\").match(p);\n        return {\n          alert: t[1],\n          children: r(t[2], n)\n        };\n      },\n      render: function (e, r, n) {\n        var a = {\n          key: n.key\n        };\n        return e.alert && (a.className = \"markdown-alert-\" + t.slugify(e.alert.toLowerCase(), Le), e.children.unshift({\n          attrs: {},\n          children: [{\n            type: i.text,\n            text: e.alert\n          }],\n          noInnerParse: !0,\n          type: i.htmlBlock,\n          tag: \"header\"\n        })), W(\"blockquote\", a, r(e.children, n));\n      }\n    }, s[i.breakLine] = {\n      match: Ue(h),\n      order: 1,\n      parse: Ge,\n      render: function (e, r, n) {\n        return W(\"br\", {\n          key: n.key\n        });\n      }\n    }, s[i.breakThematic] = {\n      match: Ie(m),\n      order: 1,\n      parse: Ge,\n      render: function (e, r, n) {\n        return W(\"hr\", {\n          key: n.key\n        });\n      }\n    }, s[i.codeBlock] = {\n      match: Ie(y),\n      order: 0,\n      parse: function (e) {\n        return {\n          lang: void 0,\n          text: ze(e[0].replace(/^ {4}/gm, \"\")).replace(re, \"$1\")\n        };\n      },\n      render: function (e, n, t) {\n        return W(\"pre\", {\n          key: t.key\n        }, W(\"code\", r({}, e.attrs, {\n          className: e.lang ? \"lang-\" + e.lang : \"\"\n        }), e.text));\n      }\n    }, s[i.codeFenced] = {\n      match: Ie(g),\n      order: 0,\n      parse: function (e) {\n        return {\n          attrs: q(\"code\", e[3] || \"\"),\n          lang: e[2] || void 0,\n          text: e[4].replace(re, \"$1\"),\n          type: i.codeBlock\n        };\n      }\n    }, s[i.codeInline] = {\n      match: Re(k),\n      order: 3,\n      parse: function (e) {\n        return {\n          text: e[2].replace(re, \"$1\")\n        };\n      },\n      render: function (e, r, n) {\n        return W(\"code\", {\n          key: n.key\n        }, e.text);\n      }\n    }, s[i.footnote] = {\n      match: Ie(b),\n      order: 0,\n      parse: function (e) {\n        return Q.push({\n          footnote: e[2],\n          identifier: e[1]\n        }), {};\n      },\n      render: We\n    }, s[i.footnoteReference] = {\n      match: Me(C),\n      order: 1,\n      parse: function (e) {\n        return {\n          target: \"#\" + t.slugify(e[1], Le),\n          text: e[1]\n        };\n      },\n      render: function (e, r, n) {\n        return W(\"a\", {\n          key: n.key,\n          href: t.sanitizer(e.target, \"a\", \"href\")\n        }, W(\"sup\", {\n          key: n.key\n        }, e.text));\n      }\n    }, s[i.gfmTask] = {\n      match: Me(E),\n      order: 1,\n      parse: function (e) {\n        return {\n          completed: \"x\" === e[1].toLowerCase()\n        };\n      },\n      render: function (e, r, n) {\n        return W(\"input\", {\n          checked: e.completed,\n          key: n.key,\n          readOnly: !0,\n          type: \"checkbox\"\n        });\n      }\n    }, s[i.heading] = {\n      match: Ie(t.enforceAtxHeadings ? L : z),\n      order: 1,\n      parse: function (e, r, n) {\n        return {\n          children: He(r, e[2], n),\n          id: t.slugify(e[2], Le),\n          level: e[1].length\n        };\n      },\n      render: function (e, r, n) {\n        return W(\"h\" + e.level, {\n          id: e.id,\n          key: n.key\n        }, r(e.children, n));\n      }\n    }, s[i.headingSetext] = {\n      match: Ie(A),\n      order: 0,\n      parse: function (e, r, n) {\n        return {\n          children: He(r, e[1], n),\n          level: \"=\" === e[2] ? 1 : 2,\n          type: i.heading\n        };\n      }\n    }, s[i.htmlBlock] = {\n      match: Ue(T),\n      order: 1,\n      parse: function (e, r, n) {\n        var t,\n          i = e[3].match(ie),\n          a = new RegExp(\"^\" + i[1], \"gm\"),\n          l = e[3].replace(a, \"\"),\n          c = (t = l, Ee.some(function (e) {\n            return e.test(t);\n          }) ? _e : He),\n          u = e[1].toLowerCase(),\n          s = -1 !== o.indexOf(u),\n          d = (s ? u : e[1]).trim(),\n          f = {\n            attrs: q(d, e[2]),\n            noInnerParse: s,\n            tag: d\n          };\n        return n.inAnchor = n.inAnchor || \"a\" === u, s ? f.text = e[3] : f.children = c(r, l, n), n.inAnchor = !1, f;\n      },\n      render: function (e, n, t) {\n        return W(e.tag, r({\n          key: t.key\n        }, e.attrs), e.text || (e.children ? n(e.children, t) : \"\"));\n      }\n    }, s[i.htmlSelfClosing] = {\n      match: Ue(M),\n      order: 1,\n      parse: function (e) {\n        var r = e[1].trim();\n        return {\n          attrs: q(r, e[2] || \"\"),\n          tag: r\n        };\n      },\n      render: function (e, n, t) {\n        return W(e.tag, r({}, e.attrs, {\n          key: t.key\n        }));\n      }\n    }, s[i.htmlComment] = {\n      match: Ue(B),\n      order: 1,\n      parse: function () {\n        return {};\n      },\n      render: We\n    }, s[i.image] = {\n      match: Re(Se),\n      order: 1,\n      parse: function (e) {\n        return {\n          alt: e[1],\n          target: je(e[2]),\n          title: e[3]\n        };\n      },\n      render: function (e, r, n) {\n        return W(\"img\", {\n          key: n.key,\n          alt: e.alt || void 0,\n          title: e.title || void 0,\n          src: t.sanitizer(e.target, \"img\", \"src\")\n        });\n      }\n    }, s[i.link] = {\n      match: Me(Ce),\n      order: 3,\n      parse: function (e, r, n) {\n        return {\n          children: Pe(r, e[1], n),\n          target: je(e[2]),\n          title: e[3]\n        };\n      },\n      render: function (e, r, n) {\n        return W(\"a\", {\n          key: n.key,\n          href: t.sanitizer(e.target, \"a\", \"href\"),\n          title: e.title\n        }, r(e.children, n));\n      }\n    }, s[i.linkAngleBraceStyleDetector] = {\n      match: Me(D),\n      order: 0,\n      parse: function (e) {\n        return {\n          children: [{\n            text: e[1],\n            type: i.text\n          }],\n          target: e[1],\n          type: i.link\n        };\n      }\n    }, s[i.linkBareUrlDetector] = {\n      match: Oe(function (e, r) {\n        return r.inAnchor || t.disableAutoLink ? null : Me(I)(e, r);\n      }),\n      order: 0,\n      parse: function (e) {\n        return {\n          children: [{\n            text: e[1],\n            type: i.text\n          }],\n          target: e[1],\n          title: void 0,\n          type: i.link\n        };\n      }\n    }, s[i.linkMailtoDetector] = {\n      match: Me(U),\n      order: 0,\n      parse: function (e) {\n        var r = e[1],\n          n = e[1];\n        return u.test(n) || (n = \"mailto:\" + n), {\n          children: [{\n            text: r.replace(\"mailto:\", \"\"),\n            type: i.text\n          }],\n          target: n,\n          type: i.link\n        };\n      }\n    }, s[i.orderedList] = be(W, 1), s[i.unorderedList] = be(W, 2), s[i.newlineCoalescer] = {\n      match: Ie(v),\n      order: 3,\n      parse: Ge,\n      render: function () {\n        return \"\\n\";\n      }\n    }, s[i.paragraph] = {\n      match: Oe(De),\n      order: 3,\n      parse: Fe,\n      render: function (e, r, n) {\n        return W(\"p\", {\n          key: n.key\n        }, r(e.children, n));\n      }\n    }, s[i.ref] = {\n      match: Me(H),\n      order: 0,\n      parse: function (e) {\n        return V[e[1]] = {\n          target: e[2],\n          title: e[4]\n        }, {};\n      },\n      render: We\n    }, s[i.refImage] = {\n      match: Re(P),\n      order: 0,\n      parse: function (e) {\n        return {\n          alt: e[1] || void 0,\n          ref: e[2]\n        };\n      },\n      render: function (e, r, n) {\n        return V[e.ref] ? W(\"img\", {\n          key: n.key,\n          alt: e.alt,\n          src: t.sanitizer(V[e.ref].target, \"img\", \"src\"),\n          title: V[e.ref].title\n        }) : null;\n      }\n    }, s[i.refLink] = {\n      match: Me(_),\n      order: 0,\n      parse: function (e, r, n) {\n        return {\n          children: r(e[1], n),\n          fallbackChildren: e[0],\n          ref: e[2]\n        };\n      },\n      render: function (e, r, n) {\n        return V[e.ref] ? W(\"a\", {\n          key: n.key,\n          href: t.sanitizer(V[e.ref].target, \"a\", \"href\"),\n          title: V[e.ref].title\n        }, r(e.children, n)) : W(\"span\", {\n          key: n.key\n        }, e.fallbackChildren);\n      }\n    }, s[i.table] = {\n      match: Ie(j),\n      order: 1,\n      parse: $e,\n      render: function (e, r, n) {\n        var t = e;\n        return W(\"table\", {\n          key: n.key\n        }, W(\"thead\", null, W(\"tr\", null, t.header.map(function (e, i) {\n          return W(\"th\", {\n            key: i,\n            style: Be(t, i)\n          }, r(e, n));\n        }))), W(\"tbody\", null, t.cells.map(function (e, i) {\n          return W(\"tr\", {\n            key: i\n          }, e.map(function (e, i) {\n            return W(\"td\", {\n              key: i,\n              style: Be(t, i)\n            }, r(e, n));\n          }));\n        })));\n      }\n    }, s[i.text] = {\n      match: Ue(ne),\n      order: 4,\n      parse: function (e) {\n        return {\n          text: e[0].replace($, function (e, r) {\n            return t.namedCodesToUnicode[r] ? t.namedCodesToUnicode[r] : e;\n          })\n        };\n      },\n      render: function (e) {\n        return e.text;\n      }\n    }, s[i.textBolded] = {\n      match: Re(X),\n      order: 2,\n      parse: function (e, r, n) {\n        return {\n          children: r(e[2], n)\n        };\n      },\n      render: function (e, r, n) {\n        return W(\"strong\", {\n          key: n.key\n        }, r(e.children, n));\n      }\n    }, s[i.textEmphasized] = {\n      match: Re(J),\n      order: 3,\n      parse: function (e, r, n) {\n        return {\n          children: r(e[2], n)\n        };\n      },\n      render: function (e, r, n) {\n        return W(\"em\", {\n          key: n.key\n        }, r(e.children, n));\n      }\n    }, s[i.textEscaped] = {\n      match: Re(ee),\n      order: 1,\n      parse: function (e) {\n        return {\n          text: e[1],\n          type: i.text\n        };\n      }\n    }, s[i.textMarked] = {\n      match: Re(K),\n      order: 3,\n      parse: Fe,\n      render: function (e, r, n) {\n        return W(\"mark\", {\n          key: n.key\n        }, r(e.children, n));\n      }\n    }, s[i.textStrikethroughed] = {\n      match: Re(Y),\n      order: 3,\n      parse: Fe,\n      render: function (e, r, n) {\n        return W(\"del\", {\n          key: n.key\n        }, r(e.children, n));\n      }\n    }, s);\n  !0 === t.disableParsingRawHTML && (delete ae[i.htmlBlock], delete ae[i.htmlSelfClosing]);\n  var le,\n    oe = function (e) {\n      var r = Object.keys(e);\n      function n(t, i) {\n        var a,\n          l,\n          o = [],\n          c = \"\",\n          u = \"\";\n        for (i.prevCapture = i.prevCapture || \"\"; t;) for (var s = 0; s < r.length;) if (a = e[c = r[s]], !i.inline || a.match.inline) {\n          var d = a.match(t, i);\n          if (d) {\n            i.prevCapture += u = d[0], t = t.substring(u.length), null == (l = a.parse(d, n, i)).type && (l.type = c), o.push(l);\n            break;\n          }\n          s++;\n        } else s++;\n        return i.prevCapture = \"\", o;\n      }\n      return r.sort(function (r, n) {\n        var t = e[r].order,\n          i = e[n].order;\n        return t !== i ? t - i : r < n ? -1 : 1;\n      }), function (e, r) {\n        return n(function (e) {\n          return e.replace(x, \"\\n\").replace(S, \"\").replace(G, \"    \");\n        }(e), r);\n      };\n    }(ae),\n    ce = (le = function (e, r) {\n      return function (n, t, i) {\n        var a = e[n.type].render;\n        return r ? r(function () {\n          return a(n, t, i);\n        }, n, t, i) : a(n, t, i);\n      };\n    }(ae, t.renderRule), function e(r, n) {\n      if (void 0 === n && (n = {}), Array.isArray(r)) {\n        for (var t = n.key, i = [], a = !1, l = 0; l < r.length; l++) {\n          n.key = l;\n          var o = e(r[l], n),\n            c = \"string\" == typeof o;\n          c && a ? i[i.length - 1] += o : null !== o && i.push(o), a = c;\n        }\n        return n.key = t, i;\n      }\n      return le(r, e, n);\n    }),\n    ue = Z(n);\n  return Q.length ? W(\"div\", null, ue, W(\"footer\", {\n    key: \"footer\"\n  }, Q.map(function (e) {\n    return W(\"div\", {\n      id: t.slugify(e.identifier, Le),\n      key: e.identifier\n    }, e.identifier, ce(oe(e.footnote, {\n      inline: !0\n    })));\n  }))) : ue;\n}\nexport default function (r) {\n  var n = r.children,\n    i = void 0 === n ? \"\" : n,\n    a = r.options,\n    l = function (e, r) {\n      if (null == e) return {};\n      var n,\n        t,\n        i = {},\n        a = Object.keys(e);\n      for (t = 0; t < a.length; t++) r.indexOf(n = a[t]) >= 0 || (i[n] = e[n]);\n      return i;\n    }(r, t);\n  return e.cloneElement(Ve(i, a), l);\n}\nexport { i as RuleType, Ve as compiler, Ne as sanitizer, Le as slugify };","map":{"version":3,"names":["n","t","i","blockQuote","breakLine","breakThematic","codeBlock","codeFenced","codeInline","footnote","footnoteReference","gfmTask","heading","headingSetext","htmlBlock","htmlComment","htmlSelfClosing","image","link","linkAngleBraceStyleDetector","linkBareUrlDetector","linkMailtoDetector","newlineCoalescer","orderedList","paragraph","ref","refImage","refLink","table","tableSeparator","text","textBolded","textEmphasized","textEscaped","textMarked","textStrikethroughed","unorderedList","e","MAX","HIGH","MED","LOW","MIN","a","reduce","r","toLowerCase","class","for","l","amp","apos","gt","lt","nbsp","quot","o","c","u","s","d","f","p","h","m","g","y","k","v","x","b","C","S","w","E","z","L","A","T","$","B","O","M","R","I","U","D","N","j","H","P","_","F","G","W","Z","q","Q","V","X","RegExp","J","K","Y","ee","re","ne","te","ie","ae","le","oe","ce","ue","se","de","fe","pe","he","me","ge","ye","ke","ve","xe","be","match","Oe","exec","prevCapture","list","inline","simple","order","parse","replace","items","map","length","indexOf","ze","ordered","start","render","key","type","Ce","Se","we","Ee","concat","slice","Le","Ae","test","Te","inTable","push","apply","trim","split","filter","Boolean","forEach","$e","align","cells","header","children","Be","textAlign","Me","Re","Ie","Ue","De","every","some","Ne","decodeURIComponent","je","He","Pe","_e","Fe","parseCaptureInline","Ge","We","Ze","call","arguments","join","qe","shift","Qe","Ve","overrides","createElement","className","forceInline","forceBlock","pop","wrapper","forceWrapper","toUpperCase","sanitizer","slugify","namedCodesToUnicode","alert","unshift","attrs","noInnerParse","tag","lang","identifier","target","href","completed","checked","readOnly","enforceAtxHeadings","id","level","inAnchor","alt","title","src","disableAutoLink","fallbackChildren","style","disableParsingRawHTML","Object","keys","substring","sort","renderRule","Array","isArray","options","cloneElement","RuleType","compiler"],"sources":["../index.tsx"],"sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of\n * [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome\n * and extensible parsing infra... without it, half of the\n * optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\n/**\n * Analogous to `node.type`. Please note that the values here may change at any time,\n * so do not hard code against the value directly.\n */\nexport const RuleType = {\n  blockQuote: '0',\n  breakLine: '1',\n  breakThematic: '2',\n  codeBlock: '3',\n  codeFenced: '4',\n  codeInline: '5',\n  footnote: '6',\n  footnoteReference: '7',\n  gfmTask: '8',\n  heading: '9',\n  headingSetext: '10',\n  /** only available if not `disableHTMLParsing` */\n  htmlBlock: '11',\n  htmlComment: '12',\n  /** only available if not `disableHTMLParsing` */\n  htmlSelfClosing: '13',\n  image: '14',\n  link: '15',\n  /** emits a `link` 'node', does not render directly */\n  linkAngleBraceStyleDetector: '16',\n  /** emits a `link` 'node', does not render directly */\n  linkBareUrlDetector: '17',\n  /** emits a `link` 'node', does not render directly */\n  linkMailtoDetector: '18',\n  newlineCoalescer: '19',\n  orderedList: '20',\n  paragraph: '21',\n  ref: '22',\n  refImage: '23',\n  refLink: '24',\n  table: '25',\n  tableSeparator: '26',\n  text: '27',\n  textBolded: '28',\n  textEmphasized: '29',\n  textEscaped: '30',\n  textMarked: '31',\n  textStrikethroughed: '32',\n  unorderedList: '33',\n} as const\n\nif (process.env.NODE_ENV !== 'production') {\n  Object.keys(RuleType).forEach(key => (RuleType[key] = key))\n}\n\nexport type RuleType = (typeof RuleType)[keyof typeof RuleType]\n\nconst enum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { class: 'className', for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^(\\s*>[\\s\\S]*?)(?=\\n\\n|$)/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BLOCKQUOTE_ALERT_R = /^(?:\\[!([^\\]]*)\\]\\n)?([\\s\\S]*)/\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^(?: {1,3})?(`{3,}|~{3,}) *(\\S+)? *([^\\n]*?)?\\n([\\s\\S]*?)(?:\\1\\n?|$)/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)((?:\\\\`|[^`])+)\\1/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\n\n/**\n * Matches footnotes on the format:\n *\n * [^key]: value\n *\n * Matches multiline footnotes\n *\n * [^key]: row\n * row\n * row\n *\n * And empty lines in indented multiline footnotes\n *\n * [^key]: indented with\n *     row\n *\n *     row\n *\n * Explanation:\n *\n * 1. Look for the starting tag, eg: [^key]\n *    ^\\[\\^([^\\]]+)]\n *\n * 2. The first line starts with a colon, and continues for the rest of the line\n *   :(.*)\n *\n * 3. Parse as many additional lines as possible. Matches new non-empty lines that doesn't begin with a new footnote definition.\n *    (\\n(?!\\[\\^).+)\n *\n * 4. ...or allows for repeated newlines if the next line begins with at least four whitespaces.\n *    (\\n+ {4,}.*)\n */\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/\n\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst FRONT_MATTER_R = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\n/**\n * For inline formatting, this partial attempts to ignore characters that\n * may appear in nested formatting that could prematurely trigger detection\n * and therefore miss content that should have been included.\n */\nconst INLINE_SKIP_R =\n  '((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|\\\\\\\\\\\\1|[\\\\s\\\\S])+?)'\n\n/**\n * Detect a sequence like **foo** or __foo__. Note that bold has a higher priority\n * than emphasized to support nesting of both since they share a delimiter.\n */\nconst TEXT_BOLD_R = new RegExp(`^([*_])\\\\1${INLINE_SKIP_R}\\\\1\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like *foo* or _foo_.\n */\nconst TEXT_EMPHASIZED_R = new RegExp(`^([*_])${INLINE_SKIP_R}\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like ==foo==.\n */\nconst TEXT_MARKED_R = new RegExp(`^(==)${INLINE_SKIP_R}\\\\1`)\n\n/**\n * Detect a sequence like ~~foo~~.\n */\nconst TEXT_STRIKETHROUGHED_R = new RegExp(`^(~~)${INLINE_SKIP_R}\\\\1`)\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_UNESCAPE_R = /\\\\([^0-9A-Za-z\\s])/g\n\n/**\n * Always take the first character, then eagerly take text until a double space\n * (potential line break) or some markdown-like punctuation is reached.\n */\nconst TEXT_PLAIN_R = /^([\\s\\S](?:(?!  |[0-9]\\.)[^*_~\\-\\n<`\\\\\\[!])*)/\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^\\\\])/g\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(\n  h: any,\n  type: LIST_TYPE\n): MarkdownToJSX.Rule<\n  MarkdownToJSX.OrderedListNode | MarkdownToJSX.UnorderedListNode\n> {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    match: allowInline(function (source, state) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(state.prevCapture)\n      const isListAllowed = state.list || (!state.inline && !state.simple)\n\n      if (isStartOfLine && isListAllowed) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    }),\n    order: Priority.HIGH,\n    parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for delta afterwards. We're going to\n        // want to set state.list to true, and state.inline depending\n        // on our list's looseness.\n        const oldStateInline = state.inline\n        const oldStateList = state.list\n        state.list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state.inline = false\n          adjustedContent = trimEnd(content) + '\\n\\n'\n        } else {\n          state.inline = true\n          adjustedContent = trimEnd(content)\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state.inline = oldStateInline\n        state.list = oldStateList\n\n        return result\n      })\n\n      return {\n        items: itemContent,\n        ordered: ordered,\n        start: start,\n      }\n    },\n    render(node, output, state) {\n      const Tag = node.ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag\n          key={state.key}\n          start={node.type === RuleType.orderedList ? node.start : undefined}\n        >\n          {node.items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  }\n}\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\nconst IMAGE_R = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_FENCED_R,\n  CODE_BLOCK_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HEADING_ATX_COMPLIANT_R,\n  NP_TABLE_R,\n  ORDERED_LIST_R,\n  UNORDERED_LIST_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_COMMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction trimEnd(str: string) {\n  let end = str.length\n  while (end > 0 && str[end - 1] <= ' ') end--\n  return str.slice(0, end)\n}\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nexport function slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State,\n  tableOutput: boolean\n): MarkdownToJSX.ParserResult[][] {\n  const prevInTable = state.inTable\n\n  state.inTable = true\n\n  let cells: MarkdownToJSX.ParserResult[][] = [[]]\n  let acc = ''\n\n  function flush() {\n    if (!acc) return\n\n    const cell = cells[cells.length - 1]\n    cell.push.apply(cell, parse(acc, state))\n    acc = ''\n  }\n\n  source\n    .trim()\n    // isolate situations where a pipe should be ignored (inline code, escaped, etc)\n    .split(/(`[^`]*`|\\\\\\||\\|)/)\n    .filter(Boolean)\n    .forEach((fragment, i, arr) => {\n      if (fragment.trim() === '|') {\n        flush()\n\n        if (tableOutput) {\n          if (i !== 0 && i !== arr.length - 1) {\n            // Split the current row\n            cells.push([])\n          }\n\n          return\n        }\n      }\n\n      acc += fragment\n    })\n\n  flush()\n\n  state.inTable = prevInTable\n\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state, true)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  /**\n   * The table syntax makes some other parsing angry so as a bit of a hack even if alignment and/or cell rows are missing,\n   * we'll still run a detected first row through the parser and then just emit a paragraph.\n   */\n  state.inline = true\n  const align = capture[2] ? parseTableAlign(capture[2]) : []\n  const cells = capture[3] ? parseTableCells(capture[3], parse, state) : []\n  const header = parseTableRow(capture[1], parse, state, !!cells.length)\n  state.inline = false\n\n  return cells.length\n    ? {\n        align: align,\n        cells: cells,\n        header: header,\n        type: RuleType.table,\n      }\n    : {\n        children: header,\n        type: RuleType.paragraph,\n      }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  tag: MarkdownToJSX.HTMLTags,\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string,\n  sanitizeUrlFn: MarkdownToJSX.Options['sanitizer']\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key\n        .trim()\n        .replace(/(-[a-z])/g, substr => substr[1].toUpperCase())\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href' || key === 'src') {\n    return sanitizeUrlFn(value, tag, key)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // Sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n    let rule\n    let ruleType = ''\n    let parsed\n    let currCaptureString = ''\n\n    state.prevCapture = state.prevCapture || ''\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        ruleType = ruleList[i]\n        rule = rules[ruleType]\n\n        if (state.inline && !rule.match.inline) {\n          i++\n          continue\n        }\n\n        const capture = rule.match(source, state)\n\n        if (capture) {\n          currCaptureString = capture[0]\n\n          // retain what's been processed so far for lookbacks\n          state.prevCapture += currCaptureString\n\n          source = source.substring(currCaptureString.length)\n\n          parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType as unknown as RuleType\n          }\n\n          result.push(parsed)\n          break\n        }\n\n        i++\n      }\n    }\n\n    // reset on exit\n    state.prevCapture = ''\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n/**\n * Marks a matcher function as eligible for being run inside an inline context;\n * allows us to do a little less work in the nested parser.\n */\nfunction allowInline<T extends Function & { inline?: 0 | 1 }>(fn: T) {\n  fn.inline = 1\n\n  return fn\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return allowInline(function match(source, state: MarkdownToJSX.State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  })\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return allowInline(function match(\n    source: string,\n    state: MarkdownToJSX.State\n  ) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  })\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return allowInline(function match(source: string /*, state*/) {\n    return regex.exec(source)\n  })\n}\n\nfunction matchParagraph(source: string, state: MarkdownToJSX.State) {\n  if (state.inline || state.simple) {\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    line += '\\n'\n\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n\n    match += line\n\n    return !!line.trim()\n  })\n\n  const captured = trimEnd(match)\n  if (captured == '') {\n    return null\n  }\n\n  // parseCaptureInline expects the inner content to be at index 2\n  // because index 1 is the delimiter for text formatting syntaxes\n  return [match, , captured]\n}\n\nexport function sanitizer(url: string): string {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  children,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  state.inline = false\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  return result\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<{\n  children: MarkdownToJSX.ParserResult[]\n}> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    children: parseInline(parse, capture[2], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction reactFor(render) {\n  return function patchedRender(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactNode[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = patchedRender(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return render(ast, patchedRender, state)\n  }\n}\n\nfunction createRenderer(\n  rules: MarkdownToJSX.Rules,\n  userRender?: MarkdownToJSX.Options['renderRule']\n) {\n  return function renderRule(\n    ast: MarkdownToJSX.ParserResult,\n    render: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactNode {\n    const renderer = rules[ast.type].render as MarkdownToJSX.Rule['render']\n\n    return userRender\n      ? userRender(() => renderer(ast, render, state), ast, render, state)\n      : renderer(ast, render, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport function compiler(\n  markdown: string = '',\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.sanitizer = options.sanitizer || sanitizer\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  options.createElement = options.createElement || React.createElement\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return options.createElement(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): React.JSX.Element {\n    input = input.replace(FRONT_MATTER_R, '')\n\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${trimEnd(input).replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return options.createElement(\n      wrapper,\n      { key: 'outer' },\n      jsx\n    ) as React.JSX.Element\n  }\n\n  function attrStringToMap(\n    tag: MarkdownToJSX.HTMLTags,\n    str: string\n  ): React.JSX.IntrinsicAttributes {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n\n        // bail out, not supported\n        if (mappedKey === 'ref') return map\n\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          tag,\n          key,\n          value,\n          options.sanitizer\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = compile(normalizedValue.trim())\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom\n   * h() JSX pragma; this allows the override functionality to be\n   * automatically applied\n   */\n  // @ts-ignore\n  const rules: MarkdownToJSX.Rules = {\n    [RuleType.blockQuote]: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, alert, content] = capture[0]\n          .replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, '')\n          .match(BLOCKQUOTE_ALERT_R)\n\n        return {\n          alert,\n          children: parse(content, state),\n        }\n      },\n      render(node, output, state) {\n        const props = {\n          key: state.key,\n        } as Record<string, unknown>\n\n        if (node.alert) {\n          props.className =\n            'markdown-alert-' +\n            options.slugify(node.alert.toLowerCase(), slugify)\n\n          node.children.unshift({\n            attrs: {},\n            children: [{ type: RuleType.text, text: node.alert }],\n            noInnerParse: true,\n            type: RuleType.htmlBlock,\n            tag: 'header',\n          })\n        }\n\n        return h('blockquote', props, output(node.children, state))\n      },\n    },\n\n    [RuleType.breakLine]: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    [RuleType.breakThematic]: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    [RuleType.codeBlock]: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          lang: undefined,\n          text: trimEnd(capture[0].replace(/^ {4}/gm, '')).replace(\n            TEXT_UNESCAPE_R,\n            '$1'\n          ),\n        }\n      },\n\n      render(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code\n              {...node.attrs}\n              className={node.lang ? `lang-${node.lang}` : ''}\n            >\n              {node.text}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs?: ReturnType<typeof attrStringToMap>\n      lang?: string\n      text: string\n    }>,\n\n    [RuleType.codeFenced]: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          attrs: attrStringToMap('code', capture[3] || ''),\n          lang: capture[2] || undefined,\n          text: capture[4].replace(TEXT_UNESCAPE_R, '$1'),\n          type: RuleType.codeBlock,\n        }\n      },\n    },\n\n    [RuleType.codeInline]: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[2].replace(TEXT_UNESCAPE_R, '$1'),\n        }\n      },\n      render(node, output, state) {\n        return <code key={state.key}>{node.text}</code>\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    [RuleType.footnote]: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.footnoteReference]: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          target: `#${options.slugify(capture[1], slugify)}`,\n          text: capture[1],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a key={state.key} href={options.sanitizer(node.target, 'a', 'href')}>\n            <sup key={state.key}>{node.text}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ target: string; text: string }>,\n\n    [RuleType.gfmTask]: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      render(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    [RuleType.heading]: {\n      match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2], slugify),\n          level: capture[1].length as MarkdownToJSX.HeadingNode['level'],\n        }\n      },\n      render(node, output, state) {\n        return h(\n          `h${node.level}`,\n          { id: node.id, key: state.key },\n          output(node.children, state)\n        )\n      },\n    },\n\n    [RuleType.headingSetext]: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: RuleType.heading,\n        }\n      },\n    },\n\n    [RuleType.htmlBlock]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        const tag = (\n          noInnerParse ? tagName : capture[1]\n        ).trim() as MarkdownToJSX.HTMLTags\n\n        const ast = {\n          attrs: attrStringToMap(tag, capture[2]),\n          noInnerParse: noInnerParse,\n          tag,\n        } as {\n          attrs: ReturnType<typeof attrStringToMap>\n          children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n          noInnerParse: Boolean\n          tag: MarkdownToJSX.HTMLTags\n          text?: string | undefined\n        }\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        if (noInnerParse) {\n          ast.text = capture[3]\n        } else {\n          ast.children = parseFunc(parse, trimmed, state)\n        }\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        state.inAnchor = false\n\n        return ast\n      },\n      render(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.text || (node.children ? output(node.children, state) : '')}\n          </node.tag>\n        )\n      },\n    },\n\n    [RuleType.htmlSelfClosing]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        const tag = capture[1].trim() as MarkdownToJSX.HTMLTags\n\n        return {\n          attrs: attrStringToMap(tag, capture[2] || ''),\n          tag,\n        }\n      },\n      render(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    },\n\n    [RuleType.htmlComment]: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.image]: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={options.sanitizer(node.target, 'img', 'src')}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      alt?: string\n      target: string\n      title?: string\n    }>,\n\n    [RuleType.link]: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          children: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a\n            key={state.key}\n            href={options.sanitizer(node.target, 'a', 'href')}\n            title={node.title}\n          >\n            {output(node.children, state)}\n          </a>\n        )\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    [RuleType.linkAngleBraceStyleDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkBareUrlDetector]: {\n      match: allowInline((source, state) => {\n        if (state.inAnchor || options.disableAutoLink) {\n          return null\n        }\n\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      }),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkMailtoDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          children: [\n            {\n              text: address.replace('mailto:', ''),\n              type: RuleType.text,\n            },\n          ],\n          target: target,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.orderedList]: generateListRule(\n      h,\n      ORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.OrderedListNode>,\n\n    [RuleType.unorderedList]: generateListRule(\n      h,\n      UNORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.UnorderedListNode>,\n\n    [RuleType.newlineCoalescer]: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      render(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    [RuleType.paragraph]: {\n      match: allowInline(matchParagraph),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <p key={state.key}>{output(node.children, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    [RuleType.ref]: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.refImage]: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={options.sanitizer(refs[node.ref].target, 'img', 'src')}\n            title={refs[node.ref].title}\n          />\n        ) : null\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    [RuleType.refLink]: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parse(capture[1], state),\n          fallbackChildren: capture[0],\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={options.sanitizer(refs[node.ref].target, 'a', 'href')}\n            title={refs[node.ref].title}\n          >\n            {output(node.children, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{node.fallbackChildren}</span>\n        )\n      },\n    },\n\n    [RuleType.table]: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      render(node, output, state) {\n        const table = node as MarkdownToJSX.TableNode\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {table.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(table, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {table.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(table, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    },\n\n    [RuleType.text]: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      render(node /*, output, state*/) {\n        return node.text\n      },\n    },\n\n    [RuleType.textBolded]: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <strong key={state.key}>{output(node.children, state)}</strong>\n      },\n    },\n\n    [RuleType.textEmphasized]: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <em key={state.key}>{output(node.children, state)}</em>\n      },\n    },\n\n    [RuleType.textEscaped]: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[1],\n          type: RuleType.text,\n        }\n      },\n    },\n\n    [RuleType.textMarked]: {\n      match: simpleInlineRegex(TEXT_MARKED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <mark key={state.key}>{output(node.children, state)}</mark>\n      },\n    },\n\n    [RuleType.textStrikethroughed]: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <del key={state.key}>{output(node.children, state)}</del>\n      },\n    },\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { match: match, parse: parse } = rules[key]\n\n  //   // rules[key].match = (...args) => {\n  //   //   const start = performance.now()\n  //   //   const result = match(...args)\n  //   //   const delta = performance.now() - start\n\n  //   //   if (delta > 5)\n  //   //     console.warn(\n  //   //       `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //   //     )\n\n  //   //   return result\n  //   // }\n\n  //   rules[key].parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     console[delta > 5 ? 'warn' : 'log'](\n  //       `${key}:parse`,\n  //       `${delta.toFixed(3)}ms`,\n  //       args[0]\n  //     )\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML === true) {\n    delete rules[RuleType.htmlBlock]\n    delete rules[RuleType.htmlSelfClosing]\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(createRenderer(rules, options.renderRule))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div\n                id={options.slugify(def.identifier, slugify)}\n                key={def.identifier}\n              >\n                {def.identifier}\n                {emitter(parser(def.footnote, { inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<\n  Omit<React.HTMLAttributes<Element>, 'children'> & {\n    children: string\n    options?: MarkdownToJSX.Options\n  }\n> = ({ children = '', options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error(\n      'markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:',\n      children\n    )\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.JSX.IntrinsicAttributes\n  )\n}\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof React.JSX.IntrinsicElements\n\n  export type State = {\n    /** true if the current content is inside anchor link grammar */\n    inAnchor?: boolean\n    /** true if parsing in an inline context (subset of rules around formatting and links) */\n    inline?: boolean\n    /** true if in a table */\n    inTable?: boolean\n    /** use this for the `key` prop */\n    key?: React.Key\n    /** true if in a list */\n    list?: boolean\n    /** used for lookbacks */\n    prevCapture?: string\n    /** true if parsing in inline context w/o links */\n    simple?: boolean\n  }\n\n  export interface BlockQuoteNode {\n    alert?: string\n    children: MarkdownToJSX.ParserResult[]\n    type: typeof RuleType.blockQuote\n  }\n\n  export interface BreakLineNode {\n    type: typeof RuleType.breakLine\n  }\n\n  export interface BreakThematicNode {\n    type: typeof RuleType.breakThematic\n  }\n\n  export interface CodeBlockNode {\n    type: typeof RuleType.codeBlock\n    attrs?: React.JSX.IntrinsicAttributes\n    lang?: string\n    text: string\n  }\n\n  export interface CodeFencedNode {\n    type: typeof RuleType.codeFenced\n  }\n\n  export interface CodeInlineNode {\n    type: typeof RuleType.codeInline\n    text: string\n  }\n\n  export interface FootnoteNode {\n    type: typeof RuleType.footnote\n  }\n\n  export interface FootnoteReferenceNode {\n    type: typeof RuleType.footnoteReference\n    target: string\n    text: string\n  }\n\n  export interface GFMTaskNode {\n    type: typeof RuleType.gfmTask\n    completed: boolean\n  }\n\n  export interface HeadingNode {\n    type: typeof RuleType.heading\n    children: MarkdownToJSX.ParserResult[]\n    id: string\n    level: 1 | 2 | 3 | 4 | 5 | 6\n  }\n\n  export interface HeadingSetextNode {\n    type: typeof RuleType.headingSetext\n  }\n\n  export interface HTMLCommentNode {\n    type: typeof RuleType.htmlComment\n  }\n\n  export interface ImageNode {\n    type: typeof RuleType.image\n    alt?: string\n    target: string\n    title?: string\n  }\n\n  export interface LinkNode {\n    type: typeof RuleType.link\n    children: MarkdownToJSX.ParserResult[]\n    target: string\n    title?: string\n  }\n\n  export interface LinkAngleBraceNode {\n    type: typeof RuleType.linkAngleBraceStyleDetector\n  }\n\n  export interface LinkBareURLNode {\n    type: typeof RuleType.linkBareUrlDetector\n  }\n\n  export interface LinkMailtoNode {\n    type: typeof RuleType.linkMailtoDetector\n  }\n\n  export interface OrderedListNode {\n    type: typeof RuleType.orderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: true\n    start?: number\n  }\n\n  export interface UnorderedListNode {\n    type: typeof RuleType.unorderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: false\n  }\n\n  export interface NewlineNode {\n    type: typeof RuleType.newlineCoalescer\n  }\n\n  export interface ParagraphNode {\n    type: typeof RuleType.paragraph\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ReferenceNode {\n    type: typeof RuleType.ref\n  }\n\n  export interface ReferenceImageNode {\n    type: typeof RuleType.refImage\n    alt?: string\n    ref: string\n  }\n\n  export interface ReferenceLinkNode {\n    type: typeof RuleType.refLink\n    children: MarkdownToJSX.ParserResult[]\n    fallbackChildren: string\n    ref: string\n  }\n\n  export interface TableNode {\n    type: typeof RuleType.table\n    /**\n     * alignment for each table column\n     */\n    align: ('left' | 'right' | 'center')[]\n    cells: MarkdownToJSX.ParserResult[][][]\n    header: MarkdownToJSX.ParserResult[][]\n  }\n\n  export interface TableSeparatorNode {\n    type: typeof RuleType.tableSeparator\n  }\n\n  export interface TextNode {\n    type: typeof RuleType.text\n    text: string\n  }\n\n  export interface BoldTextNode {\n    type: typeof RuleType.textBolded\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ItalicTextNode {\n    type: typeof RuleType.textEmphasized\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface EscapedTextNode {\n    type: typeof RuleType.textEscaped\n  }\n\n  export interface MarkedTextNode {\n    type: typeof RuleType.textMarked\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface StrikethroughTextNode {\n    type: typeof RuleType.textStrikethroughed\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface HTMLNode {\n    type: typeof RuleType.htmlBlock\n    attrs: React.JSX.IntrinsicAttributes\n    children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n    noInnerParse: Boolean\n    tag: MarkdownToJSX.HTMLTags\n    text?: string | undefined\n  }\n\n  export interface HTMLSelfClosingNode {\n    type: typeof RuleType.htmlSelfClosing\n    attrs: React.JSX.IntrinsicAttributes\n    tag: string\n  }\n\n  export type ParserResult =\n    | BlockQuoteNode\n    | BreakLineNode\n    | BreakThematicNode\n    | CodeBlockNode\n    | CodeFencedNode\n    | CodeInlineNode\n    | FootnoteNode\n    | FootnoteReferenceNode\n    | GFMTaskNode\n    | HeadingNode\n    | HeadingSetextNode\n    | HTMLCommentNode\n    | ImageNode\n    | LinkNode\n    | LinkAngleBraceNode\n    | LinkBareURLNode\n    | LinkMailtoNode\n    | OrderedListNode\n    | UnorderedListNode\n    | NewlineNode\n    | ParagraphNode\n    | ReferenceNode\n    | ReferenceImageNode\n    | ReferenceLinkNode\n    | TableNode\n    | TableSeparatorNode\n    | TextNode\n    | BoldTextNode\n    | ItalicTextNode\n    | EscapedTextNode\n    | MarkedTextNode\n    | StrikethroughTextNode\n    | HTMLNode\n    | HTMLSelfClosingNode\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult[]\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State\n  ) => React.JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    order: Priority\n    parse: MarkdownToJSX.Parser<Omit<ParserOutput, 'type'>>\n    render?: (\n      node: ParserOutput,\n      /**\n       * Continue rendering AST nodes if applicable.\n       */\n      render: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactNode\n  }\n\n  export type Rules = {\n    [K in ParserResult['type']]: K extends typeof RuleType.table\n      ? Rule<Extract<ParserResult, { type: K | typeof RuleType.paragraph }>>\n      : Rule<Extract<ParserResult, { type: K }>>\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.JSX.IntrinsicAttributes,\n      ...children: React.ReactNode[]\n    ) => React.ReactNode\n\n    /**\n     * The library automatically generates an anchor tag for bare URLs included in the markdown\n     * document, but this behavior can be disabled if desired.\n     */\n    disableAutoLink: boolean\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Allows for full control over rendering of particular rules.\n     * For example, to implement a LaTeX renderer such as `react-katex`:\n     *\n     * ```\n     * renderRule(next, node, renderChildren, state) {\n     *   if (node.type === RuleType.codeBlock && node.lang === 'latex') {\n     *     return (\n     *       <TeX as=\"div\" key={state.key}>\n     *         {String.raw`${node.text}`}\n     *       </TeX>\n     *     )\n     *   }\n     *\n     *   return next();\n     * }\n     * ```\n     *\n     * Thar be dragons obviously, but you can do a lot with this\n     * (have fun!) To see how things work internally, check the `render`\n     * method in source for a particular rule.\n     */\n    renderRule: (\n      /** Resume normal processing, call this function as a fallback if you are not returning custom JSX. */\n      next: () => React.ReactNode,\n      /** the current AST node, use `RuleType` against `node.type` for identification */\n      node: ParserResult,\n      /** use as `renderChildren(node.children)` for block nodes */\n      renderChildren: RuleOutput,\n      /** contains `key` which should be supplied to the topmost JSX element */\n      state: State\n    ) => React.ReactNode\n\n    /**\n     * Override the built-in sanitizer function for URLs, etc if desired. The built-in version is available as a library export called `sanitizer`.\n     */\n    sanitizer: (\n      value: string,\n      tag: HTMLTags,\n      attribute: string\n    ) => string | null\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (input: string, defaultFn: (input: string) => string) => string\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n  }>\n}\n\nexport default Markdown\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}